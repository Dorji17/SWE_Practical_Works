import heapq
from collections import dwque, defaultdict

class Graph:
    def __init__(self):
        self.graph = {}
        self.weights = {}
    
    def add_vertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []
    
    def add_edge(self, vertex1, vertex2):
        self.add_vertex(vertex1)
        self.add_vertex(vertex2)
        self.graph[vertex1].append(vertex2)
        self.graph[vertex2].append(vertex1) 
        self.weights[(vertex1, vertex2)] = weight
        self.weights[(vertex2, vertex1)] = weight
    
    def print_graph(self):
        for vertex in self.graph:
            print(f"{vertex}: {' '.join(map(str, self.graph[vertex]))}")
    def bfs_shortest_path(self, start_vertex, end_vertex):
        """Finds the shortest path between two vertices using BFS."""
        if start_vertex not in self.graph or end_vertex not in self.graph:
            return None

        queue = deque([(start_vertex, [start_vertex])])
        visited = set()

        while queue:
            current, path = queue.popleft()
            visited.add(current)

            for neighbor in self.graph[current]:
                if neighbor == end_vertex:
                    return path + [neighbor]
                if neighbor not in visited:
                    queue.append((neighbor, path + [neighbor]))
                    visited.add(neighbor)

        return None  # No path found

    def detect_cycle(self):
        """Detects cycles in the graph using DFS."""
        visited = set()

        def dfs(vertex, parent):
            visited.add(vertex)
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    if dfs(neighbor, vertex):
                        return True
                elif parent is not None and neighbor != parent:
                    return True
            return False

        for v in self.graph:
            if v not in visited:
                if dfs(v, None):
                    return True
        return False

    def dijkstra(self, start_vertex):
        """Implements Dijkstra's algorithm for finding the shortest path in a weighted graph."""
        if start_vertex not in self.graph:
            return None
        
        distances = {vertex: float('infinity') for vertex in self.graph}
        distances[start_vertex] = 0
        priority_queue = [(0, start_vertex)]
        previous_vertices = {vertex: None for vertex in self.graph}

        while priority_queue:
            current_distance, current_vertex = heapq.heappop(priority_queue)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor in self.graph[current_vertex]:
                weight = self.weights.get((current_vertex, neighbor), 1)
                distance = current_distance + weight

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    previous_vertices[neighbor] = current_vertex
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances, previous_vertices

    def reconstruct_path(self, start_vertex, end_vertex):
        """Reconstructs the shortest path from start_vertex to end_vertex using previous vertices."""
        distances, previous_vertices = self.dijkstra(start_vertex)
        path = []
        current = end_vertex

        while current is not None:
            path.append(current)
            current = previous_vertices[current]
        path.reverse()

        return path if distances[end_vertex] < float('infinity') else None

    def is_bipartite(self):
        """Checks if the graph is bipartite."""
        color = {}
        for vertex in self.graph:
            if vertex not in color:
                queue = deque([vertex])
                color[vertex] = 0  # Assign color 0

                while queue:
                    current = queue.popleft()
                    for neighbor in self.graph[current]:
                        if neighbor not in color:
                            color[neighbor] = 1 - color[current]  # Alternate color
                            queue.append(neighbor)
                        elif color[neighbor] == color[current]:
                            return False  # Same color neighbor found
        return True

# Test the extended Graph class
g = Graph()
g.add_edge(0, 1, 4)
g.add_edge(0, 2, 1)
g.add_edge(1, 2, 2)
g.add_edge(1, 3, 1)
g.add_edge(2, 3, 5)

# Print the graph
print("Graph:")
g.print_graph()

# Test BFS shortest path
print("\nShortest path from vertex 0 to vertex 3:", g.bfs_shortest_path(0, 3))

# Test cycle detection
print("\nDoes the graph have a cycle?", g.detect_cycle())

# Test Dijkstra's algorithm
distances, _ = g.dijkstra(0)
print("\nDijkstra's shortest distances from vertex 0:", distances)

# Test reconstructing the shortest path
print("Shortest path from vertex 0 to vertex 3 using Dijkstra:", g.reconstruct_path(0, 3))

# Create a bipartite graph
g2 = Graph()
g2.add_edge(0, 1)
g2.add_edge(0, 2)
g2.add_edge(1, 3)
g2.add_edge(2, 3)

print("\nIs the graph bipartite?", g2.is_bipartite())


